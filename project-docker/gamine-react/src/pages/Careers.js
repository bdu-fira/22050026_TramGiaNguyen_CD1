import React, { useState, useEffect } from 'react';
import { fetchCareers, submitCareerApplication } from '../services/api';
import Modal from '../components/Modal';
import './Careers.css';

function Careers() {
  const [careers, setCareers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [selectedJob, setSelectedJob] = useState(null);
  const [cvLink, setCvLink] = useState('');
  const [applicantName, setApplicantName] = useState('');
  const [applicantEmail, setApplicantEmail] = useState('');
  const [submitStatus, setSubmitStatus] = useState({ message: '', type: '' });
  const [isSubmitting, setIsSubmitting] = useState(false);

  useEffect(() => {
    const getCareers = async () => {
      try {
        setLoading(true);
        const data = await fetchCareers();
        setCareers(data);
        setError(null);
      } catch (err) {
        console.error('Failed to fetch careers:', err);
        setError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu tuy·ªÉn d·ª•ng. Vui l√≤ng th·ª≠ l·∫°i sau.');
      } finally {
        setLoading(false);
      }
    };

    getCareers();
  }, []);

  const handleApply = (job) => {
    setSelectedJob(job);
    setShowModal(true);
    resetForm();
  };

  const closeModal = () => {
    setShowModal(false);
    setSelectedJob(null);
    resetForm();
  };

  const resetForm = () => {
    setCvLink('');
    setApplicantName('');
    setApplicantEmail('');
    setSubmitStatus({ message: '', type: '' });
  };

  const handleSubmitCvLink = async (e) => {
    e.preventDefault();
    
    if (!cvLink || !cvLink.trim()) {
      setSubmitStatus({
        message: 'Vui l√≤ng nh·∫≠p link Google Drive c·ªßa CV',
        type: 'error'
      });
      return;
    }

    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng link
    if (!cvLink.includes('drive.google.com')) {
      setSubmitStatus({
        message: 'Link kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng link Google Drive',
        type: 'error'
      });
      return;
    }

    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng email
    if (applicantEmail && !isValidEmail(applicantEmail)) {
      setSubmitStatus({
        message: 'Email kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng email',
        type: 'error'
      });
      return;
    }

    setIsSubmitting(true);

    try {
      // G·ªçi API ƒë·ªÉ g·ª≠i link CV v√† th√¥ng tin ·ª©ng vi√™n
      await submitCareerApplication(
        selectedJob.job_id, 
        cvLink,
        applicantName,
        applicantEmail
      );
      
      setSubmitStatus({
        message: 'ƒê√£ g·ª≠i CV th√†nh c√¥ng. Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n s·ªõm!',
        type: 'success'
      });

      // Reset form sau khi submit th√†nh c√¥ng
      setCvLink('');
      setApplicantName('');
      setApplicantEmail('');
    } catch (error) {
      console.error('Failed to submit CV link:', error);
      setSubmitStatus({
        message: 'C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.',
        type: 'error'
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  // Ki·ªÉm tra ƒë·ªãnh d·∫°ng email
  const isValidEmail = (email) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  // Format a truncated version of the description for the card view
  const formatDescription = (description) => {
    if (description.length <= 100) return description;
    return `${description.substring(0, 100)}...`;
  };

  return (
    <div className="page-container careers-container">
      {/* Cyberpunk decorative elements */}
      <div className="cyber-circle top-right"></div>
      <div className="cyber-circle bottom-left"></div>
      <div className="cyber-line left"></div>
      <div className="cyber-line right"></div>
      
      <div className="careers-header">
        <h2>C∆° H·ªôi Ngh·ªÅ Nghi·ªáp</h2>
        <p>H√£y c√πng ch√∫ng t√¥i ƒë·ªãnh h√¨nh t∆∞∆°ng lai c·ªßa c√¥ng ngh·ªá gaming</p>
      </div>

      <div className="careers-content">
        <div className="careers-intro">
          <h3>T·∫°i Sao Ch·ªçn Ch√∫ng T√¥i</h3>
          <p>T·∫°i GaMine, ch√∫ng t√¥i ƒëam m√™ t·∫°o ra c√°c thi·∫øt b·ªã gaming v∆∞·ª£t ra kh·ªèi gi·ªõi h·∫°n. Ch√∫ng t√¥i l√† ƒë·ªôi ng≈© g·ªìm nh·ªØng ng∆∞·ªùi ƒëam m√™ c√¥ng ngh·ªá, game th·ªß, nh√† thi·∫øt k·∫ø, v√† nh·ªØng ng∆∞·ªùi s√°ng t·∫°o c√πng chia s·∫ª m·ªôt m·ª•c ti√™u chung: n√¢ng cao tr·∫£i nghi·ªám ch∆°i game th√¥ng qua ph·∫ßn c·ª©ng ti√™n ti·∫øn.</p>
          <p>Ch√∫ng t√¥i mang ƒë·∫øn m√¥i tr∆∞·ªùng l√†m vi·ªác nƒÉng ƒë·ªông v·ªõi c√°c ph√∫c l·ª£i c·∫°nh tranh, c∆° h·ªôi ph√°t tri·ªÉn chuy√™n m√¥n, v√† vƒÉn h√≥a ƒë·ªÅ cao s·ª± ƒë·ªïi m·ªõi, h·ª£p t√°c v√† c√¢n b·∫±ng gi·ªØa c√¥ng vi·ªác v√† cu·ªôc s·ªëng.</p>
        </div>

        <div className="careers-benefits">
          <h3>Quy·ªÅn L·ª£i & ƒê√£i Ng·ªô</h3>
          <div className="benefits-grid">
            <div className="benefit-card">
              <div className="benefit-icon">
                <span role="img" aria-label="S·ª©c Kh·ªèe">‚ù§Ô∏è</span>
              </div>
              <h4>S·ª©c Kh·ªèe & Th·ªÉ Ch·∫•t</h4>
              <p>B·∫£o hi·ªÉm s·ª©c kh·ªèe to√†n di·ªán, ch∆∞∆°ng tr√¨nh wellness, v√† th√†nh vi√™n ph√≤ng t·∫≠p gym</p>
            </div>
            <div className="benefit-card">
              <div className="benefit-icon">
                <span role="img" aria-label="H·ªçc T·∫≠p">üéì</span>
              </div>
              <h4>Ph√°t Tri·ªÉn Chuy√™n M√¥n</h4>
              <p>H·ªó tr·ª£ h·ªçc t·∫≠p, tham gia h·ªôi ngh·ªã, v√† ch∆∞∆°ng tr√¨nh c·ªë v·∫•n</p>
            </div>
            <div className="benefit-card">
              <div className="benefit-icon">
                <span role="img" aria-label="C√¢n B·∫±ng">‚öñÔ∏è</span>
              </div>
              <h4>C√¢n B·∫±ng C√¥ng Vi·ªác</h4>
              <p>Gi·ªù l√†m vi·ªác linh ho·∫°t, l·ª±a ch·ªçn l√†m vi·ªác t·ª´ xa, v√† ch√≠nh s√°ch ngh·ªâ ph√©p h√†o ph√≥ng</p>
            </div>
            <div className="benefit-card">
              <div className="benefit-icon">
                <span role="img" aria-label="Gaming">üéÆ</span>
              </div>
              <h4>ƒê·∫∑c Quy·ªÅn Gaming</h4>
              <p>Gi·∫£m gi√° cho nh√¢n vi√™n, ch∆∞∆°ng tr√¨nh th·ª≠ nghi·ªám s·∫£n ph·∫©m, v√† khu v·ª±c ch∆°i game</p>
            </div>
          </div>
        </div>

        <div className="open-positions">
          <h3>V·ªã Tr√≠ Tuy·ªÉn D·ª•ng</h3>
          
          {loading ? (
            <div className="loading-indicator">ƒêang t·∫£i d·ªØ li·ªáu tuy·ªÉn d·ª•ng...</div>
          ) : error ? (
            <div className="error-message">{error}</div>
          ) : careers.length === 0 ? (
            <div className="no-positions">Hi·ªán t·∫°i kh√¥ng c√≥ v·ªã tr√≠ n√†o ƒëang m·ªü. Vui l√≤ng ki·ªÉm tra l·∫°i sau.</div>
          ) : (
            careers.map((job) => (
              <div className="position-card" key={job.job_id}>
                <div className="position-info">
                  <h4>{job.title}</h4>
                  <p className="position-desc">{formatDescription(job.description)}</p>
                  <div className="tags">
                    <span className="tag">To√†n th·ªùi gian</span>
                    <span className="tag">ID: {job.job_id}</span>
                    <span className="tag">Ng√†y ƒëƒÉng: {new Date(job.created_at).toLocaleDateString()}</span>
                  </div>
                </div>
                <button className="apply-btn" onClick={() => handleApply(job)}>·ª®ng Tuy·ªÉn Ngay</button>
              </div>
            ))
          )}
        </div>
      </div>

      {/* Modal for job application */}
      {showModal && selectedJob && (
        <Modal title={`·ª®ng tuy·ªÉn: ${selectedJob.title}`} onClose={closeModal}>
          <div className="job-application-modal">
            <div className="job-details">
              <h4>{selectedJob.title}</h4>
              <p>{selectedJob.description}</p>
              
              {selectedJob.requirements && (
                <div className="job-requirements">
                  <h5>Y√™u c·∫ßu c√¥ng vi·ªác:</h5>
                  <p>{selectedJob.requirements}</p>
                </div>
              )}
            </div>
            
            <div className="application-instructions">
              <h5>C√°ch th·ª©c ·ª©ng tuy·ªÉn:</h5>
              <p>Vui l√≤ng g·ª≠i CV c·ªßa b·∫°n qua email <a href="mailto:careers@gamine.com">careers@gamine.com</a> v·ªõi ti√™u ƒë·ªÅ: "{selectedJob.title} - ID: {selectedJob.job_id}"</p>
              <p>Ho·∫∑c b·∫°n c√≥ th·ªÉ g·ª≠i link Google Drive ch·ª©a CV c·ªßa b·∫°n qua form b√™n d∆∞·ªõi:</p>
            </div>
            
            <form onSubmit={handleSubmitCvLink} className="cv-link-form">
              <div className="form-group">
                <label htmlFor="applicant-name">H·ªç t√™n (kh√¥ng b·∫Øt bu·ªôc):</label>
                <input 
                  type="text" 
                  id="applicant-name" 
                  className="cv-link-input" 
                  placeholder="Nh·∫≠p h·ªç t√™n c·ªßa b·∫°n" 
                  value={applicantName}
                  onChange={(e) => setApplicantName(e.target.value)}
                  disabled={isSubmitting}
                />
              </div>

              <div className="form-group">
                <label htmlFor="applicant-email">Email li√™n h·ªá (kh√¥ng b·∫Øt bu·ªôc):</label>
                <input 
                  type="email" 
                  id="applicant-email" 
                  className="cv-link-input" 
                  placeholder="Nh·∫≠p email li√™n h·ªá c·ªßa b·∫°n" 
                  value={applicantEmail}
                  onChange={(e) => setApplicantEmail(e.target.value)}
                  disabled={isSubmitting}
                />
              </div>

              <div className="form-group">
                <label htmlFor="cv-link">Link Google Drive c·ªßa CV:</label>
                <input 
                  type="url" 
                  id="cv-link" 
                  className="cv-link-input" 
                  placeholder="Nh·∫≠p link Google Drive ch·ª©a CV c·ªßa b·∫°n" 
                  value={cvLink}
                  onChange={(e) => setCvLink(e.target.value)}
                  disabled={isSubmitting}
                  required
                />
              </div>
              
              {submitStatus.message && (
                <div className={`submit-status ${submitStatus.type}`}>
                  {submitStatus.message}
                </div>
              )}
              
              <div className="application-buttons">
                <a 
                  href="mailto:careers@gamine.com"
                  className="apply-email-btn"
                >
                  G·ª≠i Email ·ª®ng Tuy·ªÉn
                </a>
                <button 
                  type="submit" 
                  className="submit-cv-btn"
                  disabled={isSubmitting}
                >
                  {isSubmitting ? 'ƒêang g·ª≠i...' : 'G·ª≠i Link CV'}
                </button>
              </div>
            </form>
          </div>
        </Modal>
      )}
    </div>
  );
}

export default Careers; 